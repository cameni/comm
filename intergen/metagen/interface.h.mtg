#pragma once

#ifndef __INTERGEN_GENERATED__$name$_H__
#define __INTERGEN_GENERATED__$name$_H__

//@file Interface file for $name$ interface generated by intergen
//See LICENSE file for copyright and license information

//host class: ::$classnsx rest="::" after="::"$$class$

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>
$-(if base?)$

#include "$baseclass$.h"
$(/if)$
$-[pasters]$

$@value$
$-[/pasters]$

$[classnsx after="    "]$namespace $@value$ {
$[/classnsx]-$
class $class$;
$-[classnsx first="\r\n"]$}$[/classnsx]$


$-[ns]$
namespace $@value$ {
$-[/ns]$

////////////////////////////////////////////////////////////////////////////////
$-(if !comments.empty?)$$[comments]$
$@value$
$-[/comments]$$(/if)$
class $name$
    : public $(if base?)$$base$$(elif)$intergen_interface$(/if)$
{
$-(if inhmask?)$
    const uint _inhmask = $inhmask$;

$-(/if)$
public:
     template<typename T> static constexpr bool is_derived_from_host_class() 
    {
        return std::is_base_of<::$classnsx rest="::" after="::"$$class$,T>::value;
    }

    // --- interface methods ---

$-[method !static? !destroy?]$
$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    $(if ..virtual?)$virtual $(/if)$$return.type$ $name$($[args rest="," after=" "]$ $ifckwds after=" "$$type$ $(if fnarg?)$( $-memfnclass after="::"-$ *$name$)($fnargs$)$(elif)$$name$$(/if)$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$) $-(if const?)$ const$(/if)$ $-(if ..virtual?)$ = 0$(/if)$;
$[/method]-$
$-(if !event.empty?)$

protected:

    // --- interface events (callbacks from host to client) ---
    // ---       overload these to handle host events       ---

    friend class ::$classnsx rest="::" after="::"$$class$;

$-[event !static?]$
$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    virtual $return.type$ $name$($[args rest="," after=" "]$ $type$ $(if fnarg?)$(*$name$)($fnargs$)$(elif)$$name$$(/if)$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$) $-(if const?)$ const$(/if)$
    $-(if pure?)$ = 0;$(elif return.type?="void")$ {}$(elif default_event_body?)$ { $default_event_body$ }$(elif)${ throw coid::exception("handler not implemented"); }$(/if)$
$[/event]-$

    virtual void force_bind_script_events() {}

public:
    // --- host helpers to check presence of handlers in scripts ---

$-[event !static?]$
    virtual bool is_bound_$name$() { return true; }
$-[/event]$

public:
$-(/if)$
    // --- creators ---
$-[method creator? !ifccr?]$

$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    static iref<$..name$> $name$(
        $-[args rest="," after=" "]$ $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$) {
        return $name$<$..name$>(0$[args]$, $name$$[/args]$);
    }

    template<class T>
    static iref<T> $name$( T* _subclass_$[args]$, $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$ );
$-[/method]$
$-[method creator? ifccr?]$

$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    static iref<$..name$> $name$(
        $-[args rest="," after=" "]$ $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$);
$-[/method]$

    // --- internal helpers ---
$-(if varname? destroy.name.empty?)$

    virtual ~$name$() {
        if (_cleaner)
            _cleaner(this, 0);
    }
$-(/if)$

    ///Interface revision hash
    static const int HASHID = $hash$u;

    ///Interface name (full ns::class string)
    static const coid::tokenhash& IFCNAME() {
        static const coid::tokenhash _name = "$ns rest="::" after="::"$$name$"_T;
        return _name;
    }

    int intergen_hash_id() const override $-(if !virtual?)$$(/if)$ { return HASHID; }

    bool iface_is_derived( int hash ) const override $-(if !virtual?)$$(/if)$ {
        return hash == HASHID $-(if base?)$ || $base$::iface_is_derived(hash)$(/if)$;
    }

    const coid::tokenhash& intergen_interface_name() const override $-(if !virtual?)$$(/if)$ {
        return IFCNAME();
    }

    static const coid::token& intergen_default_creator_static( backend bck ) {
$-(if default_creator.name.empty?)$
        static const coid::token _dc(""_T);
$-(elif)$
        static const coid::token _dc("$ns rest="::" after="::"$$name$.$default_creator.name$@$hash$"_T);
$-(/if)$
        static const coid::token _djs("$ns rest="::" after="::"$$name$@wrapper.js"_T);
        static const coid::token _djsc("$ns rest="::" after="::"$$name$@wrapper.jsc"_T);
        static const coid::token _dlua("$ns rest="::" after="::"$$name$@wrapper.lua"_T);
        static const coid::token _dnone;

        switch(bck) {
        case backend::cxx: return _dc;
        case backend::js:  return _djs;
        case backend::jsc: return _djsc;
        case backend::lua: return _dlua;
        default: return _dnone;
        }
    }

$-(if varname?)$
    //@return cached active interface of given host class
    //@note host side helper
    static iref<$name$> intergen_active_interface(::$classnsx rest="::" after="::"$$class$* host);

$-(/if)$
    template<enum class backend B>
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( backend bck ) const override $-(if !virtual?)$$(/if)$ {
        switch(bck) {
        case backend::js:  return intergen_wrapper_cache<backend::js>();
        case backend::jsc: return intergen_wrapper_cache<backend::jsc>();
        case backend::lua: return intergen_wrapper_cache<backend::lua>();
        default: return 0;
        }
    }

    backend intergen_backend() const override { return backend::cxx; }

    const coid::token& intergen_default_creator( backend bck ) const override $-(if !virtual?)$$(/if)$ {
        return intergen_default_creator_static(bck);
    }

    ///Client registrator
    template<class C>
    static int register_client()
    {
        static_assert(std::is_base_of<$name$, C>::value, "not a base class");

        typedef intergen_interface* (*fn_client)();
        fn_client cc = []() -> intergen_interface* { return new C; };

        coid::token type = typeid(C).name();
        type.consume("class ");
        type.consume("struct ");

        coid::charstr tmp = "$ns rest="::" after="::"$$name$"_T;
        tmp << "@client-$hash$"_T << '.' << type;

        coid::interface_register::register_interface_creator(tmp, cc);
        return 0;
    }

protected:
    static constexpr int _ifc_methods_count = $nifcmethods$$(if base?)$ + $base$::_ifc_methods_count$(/if)$;
    $-(if direct_inheritance?)$
    $-(/if)$
$-(if varname?)$

    static coid::comm_mutex& share_lock() {
        static coid::comm_mutex _mx(500, false);
        return _mx;
    }

    ///Cleanup routine called from ~$name$()
    static void _cleaner_callback($name$* m, intergen_interface* ifc) {
        m->assign_safe(ifc, 0);
    }

    bool assign_safe(intergen_interface* client__, iref<$name$>* pout);

    typedef void (*cleanup_fn)($name$*, intergen_interface*);
    cleanup_fn _cleaner = 0;
$-(/if)$

    bool set_host(policy_intrusive_base*, intergen_interface*, iref<$name$>* pout);
$-(if destroy.name.empty!)$

    ~$name$() {
        VT_CALL($destroy.return.type$,($[destroy.args rest=","]$$type$$[/destroy.args]$),0)($[destroy.args rest=","]$$name$$[/destroy.args]$);
$-(if varname?)$
        if (_cleaner)
            _cleaner(this, 0);
$-(/if)$
    }
$-(/if)$
};
$-[pasteafters]$

$@value$
$-[/pasteafters]$

$-[method creator? !ifccr?]$
////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> $..name$::$name$( T* _subclass_
    $-[args]$, $type$ $name$$size$$[/args]$ )
{
    typedef iref<T> (*fn_creator)($..name$*$[args]$, $type$$[/args]$);

    static fn_creator create = 0;
    static const coid::token ifckey = "$..ns rest="::" after="::"$$..name$.$name$@$..hash$"_T;

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("$name$"_T, "$..ns rest="::" after="::"$$..name$.$name$"_T, "@$..hash$"_T);
        return 0;
    }

    return create(_subclass_$[args]$, $name$$[/args]$);
}

$-[/method]$
$-[method static? ifccr?]$
////////////////////////////////////////////////////////////////////////////////
inline iref<$..name$> $..name$::$name$($-[args rest=", "]$$type$ $name$$size$$[/args]$)
{
    typedef iref<$..name$> (*fn_creator)($[args rest=", "]$$type$$[/args]$);

    static fn_creator create = 0;
    static const coid::token ifckey = "$..ns rest="::" after="::"$$..name$.$name$@$..hash$.ifc"_T;

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("$name$"_T, "$..ns rest="::" after="::"$$..name$.$name$"_T, "@$..hash$"_T);
        return 0;
    }

    return create($[args rest=", "]$$name$$[/args]$);
}

$-[/method]$
$-(if !virtual?)$
#pragma warning(push)
#pragma warning(disable : 4191)

$-[method !static? !destroy?]$
inline $return.type$ $..name$::$name$($[args rest="," after=" "]$ $type$ $(if fnarg?)$( $-memfnclass after="::"-$ *$name$)($fnargs$)$(elif)$$name$$(/if)$$size$$[/args]$) $-(if const?)$ const$(/if)$
{ return VT_CALL($return.type$,($[args rest=","]$ $-(if fnarg?)$$type$($memfnclass after="::"$*)($fnargs$)$(elif)$$type$$(/if)-$ $size$$[/args]$) $-(if const?)$ const$(/if)$,$index$$(if ..direct_inheritance?)$ + $..base$::_ifc_methods_count$(/if)$)($[args rest=","]$ $-(if xref?)$std::forward<$basetype$>($(/if)-$ $name$ $-(if xref?)$)$(/if)-$ $[/args]$); }
$[/method]-$

#pragma warning(pop)
$(/if)-$

$-[ns]$
} //namespace
$-[/ns]$

#endif //__INTERGEN_GENERATED__$name$_H__

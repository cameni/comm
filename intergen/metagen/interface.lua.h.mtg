#pragma once

#ifndef __INTERGEN_GENERATED__$name$_LUA_H__
#define __INTERGEN_GENERATED__$name$_LUA_H__

//@file Lua interface file for $name$ interface generated by intergen
//See LICENSE file for copyright and license information

#include "$hdrfile$"

#include <comm/intergen/ifc.lua.h>
#include <comm/token.h>

$-[ns]$
namespace $@value$ {
$-[/ns]$
namespace lua {

class $name$_dispatcher
{
public:
$-[method creator?]$

$(if !comments.empty?)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    //@param script - script for object to bind to
    //@param bindvar - name of variable in script context for object to bind to
    //@param ctx -
    static iref<$..ns rest="::"$::$..name$_dispatcher> $name$( lua_State * L, const ::lua::script_handle& script
        $-[args]$, $type$ $name$$size$ $-(if defval?)$ = $defval$$(/if)$$[/args]$, const coid::token& bind_class_name = coid::token(), const coid::token& bind_var_name = coid::token(), iref<::lua::registry_handle>* ctx = 0)
    {
        typedef iref<$..ns rest="::"$::$..name$_dispatcher> (*fn_bind)(lua_State * L, const ::lua::script_handle&$[args]$, $type$$[/args]$, const coid::token&, const coid::token&, iref<::lua::registry_handle>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "$..ns rest="::" after="::"$$..name$.$name$@creator.lua";

        if(!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if(!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(L, script$[args]$, $name$$[/args]$, bind_class_name, bind_var_name, ctx);
    }
$-[/method]$
};

} //namespace lua
$-[ns]$
} //namespace
$-[/ns]$


#endif //__INTERGEN_GENERATED__$name$_LUA_H__
